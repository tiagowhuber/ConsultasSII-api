name: SII Data Scheduler

on:
  schedule:
    # Schedule for Chilean timezone (UTC-3 in winter, UTC-4 in summer)
    # 8AM Chilean = 11AM UTC (winter) / 12PM UTC (summer) - using winter time
    - cron: '0 11 * * 1-5'
    # 11AM Chilean = 2PM UTC (winter) / 3PM UTC (summer)
    - cron: '0 14 * * 1-5'
    # 1PM Chilean = 4PM UTC (winter) / 5PM UTC (summer)
    - cron: '0 16 * * 1-5'
    # 4PM Chilean = 7PM UTC (winter) / 8PM UTC (summer)
    - cron: '0 19 * * 1-5'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      year:
        description: 'Year (YYYY)'
        required: false
        default: ''
      month:
        description: 'Month (MM)'
        required: false
        default: ''

env:
  # Timezone for logging
  TZ: America/Santiago

jobs:
  fetch-sii-data:
    runs-on: ubuntu-latest
    # Only run if scheduler is enabled
    if: ${{ vars.ENABLE_SCHEDULER == 'true' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Set up timezone
        run: |
          sudo timedatectl set-timezone America/Santiago
          echo "Current time in Chile: $(date)"
      
      - name: Get current date
        id: date
        run: |
          # Use input values if provided (manual trigger), otherwise use current date
          if [ -n "${{ github.event.inputs.year }}" ] && [ -n "${{ github.event.inputs.month }}" ]; then
            echo "year=${{ github.event.inputs.year }}" >> $GITHUB_OUTPUT
            echo "month=${{ github.event.inputs.month }}" >> $GITHUB_OUTPUT
            echo "Manual trigger: ${{ github.event.inputs.year }}/${{ github.event.inputs.month }}"
          else
            echo "year=$(date +%Y)" >> $GITHUB_OUTPUT
            echo "month=$(date +%m)" >> $GITHUB_OUTPUT
            echo "Scheduled trigger: $(date +%Y)/$(date +%m)"
          fi
          
      - name: Check if business day
        id: business_day
        run: |
          # Get day of week (1=Monday, 7=Sunday)
          DAY_OF_WEEK=$(date +%u)
          if [ $DAY_OF_WEEK -le 5 ]; then
            echo "is_business_day=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Today is a business day (day $DAY_OF_WEEK)"
          else
            echo "is_business_day=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Today is weekend (day $DAY_OF_WEEK), skipping"
          fi
      
      - name: Trigger SII Data Fetch
        if: steps.business_day.outputs.is_business_day == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          echo "üîÑ Starting SII data fetch for ${{ steps.date.outputs.year }}/${{ steps.date.outputs.month }}"
          echo "üìç API URL: ${{ secrets.API_BASE_URL }}/api/sii/fetch-and-store/${{ steps.date.outputs.year }}/${{ steps.date.outputs.month }}"
          
          # First, warm up the function with a health check
          echo "üî• Warming up serverless function..."
          curl -s "${{ secrets.API_BASE_URL }}/api/scheduler/health" || true
          sleep 5
          
          # Make the API call with retries for cold starts
          for i in {1..3}; do
            echo "üîÑ Attempt $i/3..."
            RESPONSE=$(curl -X POST \
              "${{ secrets.API_BASE_URL }}/api/sii/fetch-and-store/${{ steps.date.outputs.year }}/${{ steps.date.outputs.month }}" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.SCHEDULER_SECRET }}" \
              -w "\nHTTP_STATUS:%{http_code}\nTIME_TOTAL:%{time_total}s" \
              -s \
              --max-time 600 \
              --connect-timeout 30)
            
            # Extract HTTP status
            HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS:" | cut -d: -f2)
            TIME_TOTAL=$(echo "$RESPONSE" | grep "TIME_TOTAL:" | cut -d: -f2)
            RESPONSE_BODY=$(echo "$RESPONSE" | sed '/HTTP_STATUS:/,$d')
            
            echo "‚è±Ô∏è Request completed in: $TIME_TOTAL"
            echo "üìä HTTP Status: $HTTP_STATUS"
            
            if [ "$HTTP_STATUS" -eq 200 ] || [ "$HTTP_STATUS" -eq 201 ]; then
              echo "‚úÖ SII data fetch completed successfully on attempt $i!"
              echo "üìÑ Response: $RESPONSE_BODY"
              exit 0
            elif [ "$HTTP_STATUS" -eq 308 ] || [ "$HTTP_STATUS" -eq 301 ] || [ "$HTTP_STATUS" -eq 302 ]; then
              echo "üîÑ Received redirect (status $HTTP_STATUS), retrying in 10 seconds..."
              sleep 10
            else
              echo "‚ùå Attempt $i failed with status: $HTTP_STATUS"
              echo "üìÑ Error response: $RESPONSE_BODY"
              if [ $i -eq 3 ]; then
                exit 1
              fi
              sleep 10
            fi
          done
      
      - name: Notify on failure
        if: failure()
        run: |
          echo "üö® SII data fetch failed!"
          echo "‚è∞ Time: $(date)"
          echo "üìÖ Target: ${{ steps.date.outputs.year }}/${{ steps.date.outputs.month }}"
          echo "üîó Check the GitHub Actions logs for more details"